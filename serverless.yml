org: subash1999
app: ride-sharing-app
service: driver-serverice

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'development'} # Default stage is 'development'
  region: us-east-1
  environment:
    NODE_ENV: ${env:NODE_ENV, 'development'} # Reference the environment variable from .env file
    # SERVERLESS_ACCESS_KEY: ${env:SERVERLESS_ACCESS_KEY}
    APP_NAME: ${env:APP_NAME, 'driver-service'}
    APP_URL: ${env:APP_URL, 'http://localhost:3000'}
    APP_PORT: ${env:APP_PORT, '3000'}
    AWS_REGION: ${env:AWS_REGION, 'us-east-1'}
    AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID, 'test'}
    AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY, 'test'}
    AWS_ENDPOINT: ${env:AWS_ENDPOINT, 'http://localhost:4566'}
    REDIS_HOST: ${env:REDIS_HOST, 'localhost'}
    REDIS_PORT: ${env:REDIS_PORT, '6379'}
    # REDIS_PASSWORD: ${env:REDIS_PASSWORD, 'your_redis_password'}
    REDIS_DB: ${env:REDIS_DB, '0'}
    MYSQL_HOST: ${env:MYSQL_HOST, 'localhost'}
    MYSQL_USER: ${env:MYSQL_USER, 'root'}
    MYSQL_PASSWORD: ${env:MYSQL_PASSWORD, 'password'}
    MYSQL_DATABASE: ${env:MYSQL_DATABASE, 'test'}
    KAFKA_BROKER: ${env:KAFKA_BROKER, 'localhost:9093'}
    KAFKA_CLIENT_ID: ${env:KAFKA_CLIENT_ID, 'driver-service'}
    KAFKA_GROUP_ID: ${env:KAFKA_GROUP_ID, 'driver-service-group'}
    KAFKA_TOPIC: ${env:KAFKA_TOPIC, 'driver-service-topic'}
    KAFKA_SASL_USERNAME: ${env:KAFKA_SASL_USERNAME, 'user'}
    KAFKA_SASL_PASSWORD: ${env:KAFKA_SASL_PASSWORD, 'password'}
    KAFKA_SSL_CA_CERT_PATH: ${env:KAFKA_SSL_CA_CERT_PATH, 'certs/ca.crt'}
    KAFKA_SSL_CLIENT_CERT_PATH: ${env:KAFKA_SSL_CLIENT_CERT_PATH, 'certs/client.crt'}
    KAFKA_SSL_CLIENT_KEY_PATH: ${env:KAFKA_SSL_CLIENT_KEY_PATH, 'certs/client.key'}
    LOG_LEVEL: ${env:LOG_LEVEL, 'debug'}

functions:
  api:
    handler: handler.handler
    events:
      - httpApi:
          path: "/{proxy+}"
          method: any

plugins:
  - serverless-localstack # Plugin to integrate with LocalStack
  - serverless-offline # Optional: Allows offline API testing
  - serverless-webpack-offline-reload

custom:
  localstack:
    debug: true
    stages:
      - development
    host: http://localstack:4566 # LocalStack container name in Docker Compose

resources:
  Resources:
    ApiGateway:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: driver-serverless-api
